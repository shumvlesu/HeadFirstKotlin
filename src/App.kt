fun main() {

    //Чтобы точно создать объект и переменную типа Long, можно также добавить суффикс «L» в конец целого числа:
    var hugeNumber = 6L

    //При создании переменной Char присваивается символ, заключенный в одинарные кавычки
    var letter = 'D'

    //Чтобы создать переменную типа String, присвойте ей последовательность символов, заключенных в двойные кавычки:
    var name = "Fido"

    //Объявление переменной с явным указанием типа выглядит так
    var smallNum: Short

    //пример, следующая команда создает переменную типа Short с именем z и присваивает ей значение 6:
    var z: Short = 6

    //если вы хотите присвоить значение переменной Int другой переменной, Long, для этого используется код следующего вида:
    val x2 = 5
    var z2: Long = x2.toLong() //toByte(), toShort(), toInt(), toLong(), toFloat() и toDouble()

    //Если значение Long лежит в диапазоне допустимых значений Int, преобразование из Long в Int не создаст проблем.
    //Например, преобразование значения Long 42 в Int даст Int со значением 42:
    var x = 42L
    var y: Int = x.toInt()

    //Но если значение Long слишком велико для Int, компилятор его усекает, и у вас остается нечто странное (хотя и пригодное
    //для вычислений). Например, при попытке преобразовать значение Long 1234567890123 в Int полученное число Int будет
    //иметь значение 1912276171
    var x3 = 1234567890123
    var y3: Int = x3.toInt()  //Значение 1912276171!

    //или еще пример с неправильным преобразованием
    var x4 = 123.456
    var y4: Int = x4.toInt()  //Значение 123

    //Массив
    var myArray = arrayOf(1, 2, 3)
    var myArray2 : Array<Int> = arrayOf(1, 2, 3)

    //Объявление переменной с ключевым словом val означает, что переменная не может повторно
    //использоваться для другого объекта. При этом сам объект можно изменять
    val myArray3 = arrayOf(1, 2, 3)
    myArray3[2] = 6

    //пример шаблона для вывода выражений в строковое сообщение
    var result = "myArray is ${if (myArray.size > 10) "large" else "small"}"

    //просто переменную можно вывести так
    var x5 = 42
    var value = "Value of x is $x5"


    //*********************
    //*  Чтобы создать переменную, компилятор должен
    //знать ее имя, тип и возможность ее повторного
    //использования.

    //*  Если тип переменной не задан явно, то компи-
    //лятор определяет его по значению.

    //*  В переменной хранится ссылка на объект.

    //*  Объект обладает состоянием и поведением.
    //Доступ к его поведению предоставляется через
    //функции.

    //*  Определение переменной с ключевым словом
    //var означает, что ссылка на объект, храня-
    //щаяся в переменной, может быть изменена.
    //Определение переменной с ключевым словом
    //val означает, что переменная содержит одну
    //и ту же ссылку до конца работы программы.

    //*  В Kotlin поддерживаются следующие базовые
    //типы: Byte, Short, Int, Long, Float,
    //Double, Boolean, Char и String.

    //*  Чтобы явно определить тип переменной, по-
    //ставьте двоеточие после имени переменной,
    //а затем укажите ее тип:
    //   var tinyNum: Byte

    //*  Значение может быть присвоено только пере-
    //менной, обладающей совместимым типом.

    //*  Один числовой тип можно преобразовать к дру-
    //гому числовому типу. Если значение не помеща-
    //ется в новый тип, происходит потеря точности.

    //*  Для создания массивов используется функция
    //arrayOf:
    //var myArray = arrayOf(1, 2, 3)

    //*  При обращении к элементу массива указывается
    //его индекс: например myArray[0]. Первый
    //элемент в массиве имеет индекс 0.

    //*  Для получения размера массива используется
    //конструкция myArray.size.

    //*  Компилятор определяет тип массива по зна-
    //чениям его элементов. Вы также можете явно
    //определить тип массива:
    //   var myArray: Array<Byte>

    //*  Если массив определяется ключевым словом
    //val, вы все равно можете определять элементы
    //в массиве.

    //*  Строковые шаблоны предоставляют простой
    //и быстрый механизм включения переменных или
    //результатов вычисления выражений в строку.



}