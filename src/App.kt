fun main(args: Array<String>) {
    var w: Wolf? = Wolf()
    if (w != null) {
        w.eat()
    }
    var x = w?.hunger
    println("The value of x is $x")
    //Использует «Элвис-оператор»
    //для присваивания y значения hunger,
    //если переменная w не равна null.
    //Если переменная w равна null,
    //то y присваивается -1.
    var y = w?.hunger ?: -1
    println("The value of y is $y")
    var myWolf = MyWolf()
    myWolf?.wolf?.hunger = 8
    println("The value of myWolf?.wolf?.hunger is ${myWolf?.wolf?.hunger}")
    var myArray = arrayOf("Hi", "Hello", null)
    for (item in myArray) {
        item?.let { println(it) } //Выводит элементы массива, отличные от null.
    }
    getAlphaWolf()?.let { it.eat() }
    w = null
    //Выдает исключение NullPointerException, так как значение w равно null.
    //var z = w!!.hunger


    //Результат:
    //The Wolf is eating meat
    //The value of x is 10
    //The value of y is 10
    //The value of myWolf?.wolf?.hunger is 8
    //Hi
    //Hello
    //The Wolf is eating meat


    //*  null — это значение, показывающее, что переменная не содержит ссылку на
    //объект. Переменная существует, но ни на что не ссылается.

    //*  null-совместимый тип может хранить значения null в дополнение к базовому типу.
    //Чтобы определить тип как null-совместимый, добавьте ? после имени.

    //*  Чтобы обратиться к свойству или функции null-совместимой переменной, сначала
    //необходимо убедиться в том, что они отличны от null.

    //*  Если компилятор не может гарантировать, что переменная не стала равной null
    //между проверкой и использованием, к ее свойствам и функциям следует обращаться с использованием оператора безопасного вызова (?.).

    //*  Безопасные вызовы могут объединяться в цепочку.

    //*  Чтобы код выполнялся тогда и только тогда, когда значение отлично от null, используйте ?.let.

    //*  «Элвис-оператор» (?:) — безопасная альтернатива для выражений if.

    //*  Оператор проверки на определенность  (!!)  выдает  исключение NullPointerException, если проверяемое значение равно null.

    //*  Исключение — предупреждение, которое выдается в исключительных ситуациях. Исключение представляет собой объект типа Exception.

    //*  Исключения выдаются командой throw.

    //*  Для перехвата исключений используется конструкция try/catch/finally.

    //*  try и throw являются выражениями.

    //*  Используйте безопасное приведение (as?), чтобы избежать исключения ClassCastException.

}
