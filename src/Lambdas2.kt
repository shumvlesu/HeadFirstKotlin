fun main(args: Array<String>) {

    //Преобразовать 2.5 кг в фунты
    println("Convert 2.5kg to Pounds: ${getConversionLambda("KgsToPounds")(2.5)}")
    //Определить два лямбда-выражения для преобразований
    val kgsToPoundsLambda = getConversionLambda("KgsToPounds") //getConversionLambda используется для получения двух лямбда-выражений.
    val poundsToUSTonsLambda = getConversionLambda("PoundsToUSTons")

    //Два лямбда-выражения преобразуются в одно новое
    val kgsToUSTonsLambda = combine(kgsToPoundsLambda, poundsToUSTonsLambda) //Создаем лямбда-выражение для преобразования Double из килограммов в американские тонны.

    //Использовать новое лямбда-выражение для преобразования 17,4 кг в американские тонны
    val value = 17.4
    println("$value kgs is ${convert(value, kgsToUSTonsLambda)} US tons")


}

//псевдоним типа. что-бы не писать везде длинное "(Double) -> Double" мы укорачиваем его до "DoubleConversion"
typealias DoubleConversion = (Double) -> Double

//лямбда как еще один параметр
fun convert(x: Double, converter: DoubleConversion) : Double {
    val result = converter(x)
    println("$x is converted to $result")
    return result
}

//Добавляем функцию getConversionLambda. Она возвращает лямбду.
fun getConversionLambda(str: String): DoubleConversion {
    if (str == "CentigradeToFahrenheit") {
        return { it * 1.8 + 32 }
    } else if (str == "KgsToPounds") {
        return { it * 2.204623 }
    } else if (str == "PoundsToUSTons") {
        return { it / 2000.0 }
    } else {
        return { it }
    }
}

//Добавляем функцию combine. Принимает в качестве параметра лямбды, и возвращает тоже лямбду, но уже скомбинированную из 2х входящих.
fun combine(lambda1: DoubleConversion, lambda2: DoubleConversion): DoubleConversion {
    return { x: Double -> lambda2(lambda1(x)) }
}


//*  Лямбда-выражение имеет вид: { x: Int -> x + 5 }

//*  Лямбда-выражения заключаются в фигурные скобки, могут включать параметры и содержат тело.

//*  Лямбда-выражение может состоять из нескольких строк. Последнее вычисленное
//выражение в теле используется как возвращаемое значение лямбда-выражения.

//* Лямбда-выражение можно присвоить переменной. Тип переменной должен быть совместим с типом лямбда-выражения.

//*  Тип лямбда-выражения имеет формат: (параметры) -> возвращаемое_значение

//*  Там, где это возможно, компилятор старается автоматически определить тип параметров лямбда-выражений.

//*  Если лямбда-выражение получает один параметр, его можно заменить обозначением it.

//*  Чтобы выполнить лямбда-выражение, вы либо передаете ему параметры в круглых скобках, либо вызываете его функцию invoke.

//*  Лямбда-выражение можно передать в параметре функции или использовать его в качестве возвращаемого выражения функции.
//Функция, использующая лямбда-выражения подобным образом, называется функцией высшего порядка.

//*  Если последний параметр функции является лямбда-выражением, то при вызове функции лямбда-выражение можно вынести за круглые скобки.

//*  Если функция получает один параметр, который является лямбда-выражением, то при вызове функции скобки можно опустить.

//*  Псевдоним типа позволяет задать альтернативное имя для существующего типа.
//Псевдоним типа определяется ключевым словом typealias.