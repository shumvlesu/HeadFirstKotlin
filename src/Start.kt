fun main() {

    val animals = arrayOf(Hippo(), Wolf())
    for (item in animals) {
        item.roam()
        item.eat()
    }
    val vet = Vet()
    val wolf = Wolf()
    val hippo = Hippo()
    vet.giveShot(wolf)
    vet.giveShot(hippo)

    val roamables = arrayOf(Hippo(), Wolf(), Vehicle())
    for (item in roamables) {
        item.roam()
        if (item is Animal) {
            item.eat()
        }
    }

}


//*  Для абстрактных классов запрещено создание экземпляров. Абстрактные классы
//могут содержать как абстрактные, так и неабстрактные свойства и функции.

//*  Любой класс, содержащий абстрактное свойство или функцию, должен быть объявлен абстрактным.

//* Класс, который не является абстрактным, называется конкретным.

//*  Абстрактные свойства или функции реализуются переопределением.

//*  Все абстрактные свойства и функции должны переопределяться во всех конкретных подклассах.

//*  Интерфейс позволяет определить общее поведение вне иерархии суперкласса, чтобы независимые классы могли пользоваться
//преимуществами полиморфизма.

//*  Интерфейсы могут содержать как абстрактные, так и неабстрактные функции.

//*  Свойства интерфейсов могут быть абстрактными, а могут иметь get- и set-методы. Они
//не могут инициализироваться и не могут обращаться к полям данных.

//*  Класс может реализовать несколько интерфейсов.

//*  Если подкласс наследуется от суперкласса (или реализует интерфейс) с именем A,
//то код:
//     super<A>.myFunction
//может использоваться для вызова реализации myFunction, определенной в A.

//*  Если переменная содержит ссылку на объект, оператор is может использоваться
//для проверки типа используемого объекта.

//*  Оператор is выполняет умное приведение, если компилятор может гарантировать, что
//используемый объект не изменяется между проверкой типа и его использованием.

//*  Оператор as выполняет явное приведение типа.

//*  Выражение when позволяет проверить значение переменной по набору вариантов.